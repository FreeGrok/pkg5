'\" te
.\" Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
.Dd February 17, 2022
.Dt PKGDEPEND 1
.Os
.Sh NAME
.Nm pkgdepend
.Nd Image Packaging System dependency analyzer
.Sh SYNOPSIS
.Nm
.Op Ar options
.Ic command
.Op Ar cmd_options
.Op Ar operands
.Pp
.Nm
.Ic generate
.Op Fl IMm
.Fl d Ar dir
.Op Fl d Ar dir
.Op Fl D Ar name Ns Cm \&= Ns Ar value
.Op Fl k Ar path
.Ar manifest_file
.Pp
.Nm
.Ic resolve
.Op Fl EmoSv
.Op Fl d Ar output_dir
.Oo Fl e Ar external_package_file Oc Ns \&...
.Op Fl s Ar suffix
.Ar manifest_file Ns \&...
.Sh DESCRIPTION
The
.Nm
command generates and resolves dependencies for packages.
A package might depend on files from other packages.
The
.Nm
command is typically used in two passes: file dependency generation and
file-to-package resolution.
.Pp
The
.Ic generate
subcommand examines the content of a package and determines what external files
the package needs.
.Pp
The
.Ic resolve
subcommand takes the list of files from the
.Ic generate
step, and searches a reference set of packages to determine the names of the
packages that contain those dependent files.
The reference set of packages that are searched for the dependent files are the
packages that are currently installed on the publisher's system.
.Pp
Several components of delivered files are used as sources of dependency
information:
.Bl -tag -width "Hard links"
.It Sy ELF
ELF headers in delivered files are analyzed for dependency information, with the
.Fl k
and
.Fl D
options modifying the information obtained.
For more details on ELF dependencies, see
.Xr ldd 1
and the
.%T Linker and Libraries Guide .
.It Sy Scripts
Shell scripts that contain
.Sy #!
lines referencing an interpreter result in a dependency on the package that
delivers that interpreter.
.It Sy Python
Python scripts are first analysed as scripts.
In addition, any imports the script declares might also serve as sources of
dependency information.
.It Sy Hard links
Hard links in manifests result in a dependency on the package that delivers the
link target.
.It Sy SMF
Delivered SMF service manifests that include
.Sy require_all
dependencies result in dependencies on the packages that deliver the SMF
manifests that provide those FMRIs.
.El
.Sh OPTIONS
The following options are supported:
.Bl -tag -width Ds
.It Fl \&-help , Fl \&?
Display a usage message.
.It Fl R Ar dir
Operate on the image rooted at
.Ar dir .
If no directory was specified or determined based on environment, the default
is /.
See the
.Sx Environment Variables
section for more information.
.El
.Sh SUB-COMMANDS
The following subcommands are supported:
.Bl -tag -width Ds
.It Xo
.Nm
.Ic generate
.Op Fl IMm
.Fl d Ar dir
.Op Fl d Ar dir
.Op Fl D Ar name Ns Cm \&= Ns Ar value
.Op Fl k Ar path
.Ar manifest_file
.Xc
.Pp
Produce the dependencies on files of the manifest specified by
.Ar manifest_file .
.Bl -tag -width Ds
.It Fl I
Show the dependencies that are satisfied within
.Ar manifest_file .
Do not use the result of
.Fl I
with
.Nm Ic resolve .
.It Fl M
Display a list of file types that could not be analyzed.
.It Fl m
Repeat the original manifest with any discovered dependencies added after.
.It Fl d Ar dir
Add
.Ar dir
to a list of directories to search for the manifest's files.
.It Fl D Ar name Ns Cm = Ns Ar value
Add the
.Ar value
as a way to expand the token
.Ar name
in run paths for ELF file dependencies.
.It Fl k Ar path
Add the
.Ar path
to the list of run paths to search for kernel modules.
Using the
.Fl k
option removes the default paths, which are
.Pa /kernel
and
.Pa /usr/kernel .
.Pp
Run paths such as those specified by the
.Fl k
option can also be specified per action or per manifest by using the action or
manifest attribute
.Sy pkg.depend.runpath .
The value of the
.Sy pkg.depend.runpath
attribute is a colon-separated string of the paths to use.
Setting any
.Sy pkg.depend.runpath
attributes in the manifest or action overrides paths specified with the
.Fl k
option.
.Pp
The special token
.Sy $PKGDEPEND_RUNPATH
can be used as one component of the
.Sy pkg.depend.runpath
attribute value in order to include the standard system run path for the file
being analyzed.
.El
.Pp
In some cases, you might want to prevent automatic generation of dependencies.
For example, if a package delivers a sample Python script that imports a set of
modules, those modules imported by the sample script are not dependencies for
the package that delivers the sample script.
Use the action or manifest attribute
.Sy pkg.depend.bypass-generate
to prevent generating dependencies against the specified files.
.Pp
The
.Sy pkg.depend.bypass-generate
values are Python regular expressions that match file names.
The regular expressions are implicitly anchored at the start and end of the
file path.
The value given in the following example matches
.Sy this/that
but does not match
.Sy something/this/that/the/other .
.Pp
.Dl pkg.depend.bypass-generate=this/that
.Pp
For more information about Python regular expression syntax, see the
documentation at
.Lk http://docs.python.org/dev/howto/regex.html .
.Pp
When
.Nm Ic generate
input manifests contain SMF manifest files, any SMF services or instances
declared by those SMF manifest files are included in the
.Nm
output.
These SMF services or instances are included in the form of a
.Ic set
action with the name
.Sy org.opensolaris.smf.fmri .
.It Xo
.Nm
.Ic resolve
.Op Fl EmoSv
.Op Fl d Ar output_dir
.Oo Fl e Ar external_package_file Oc Ns \&...
.Op Fl s Ar suffix
.Ar manifest_file Ns \&...
.Xc
.Pp
Transform dependencies on files into dependencies on the packages that deliver
those files.
Dependencies are first resolved against the manifests given on the command line
and then against the packages installed on the system.
By default, the dependencies for each manifest are placed in a file named
.Ar manifest_file Ns \&.res
.Bl -tag -width Ds
.It Fl e Ar external_package_file
Only resolve against packages from the system whose names match a pattern in
.Ar external_package_file .
This option can be specified multiple times.
The
.Fl e
option cannot be used with the
.Fl S
option.
.It Fl E
If
.Fl e
is specified, show the packages that were expected to be external dependencies
but were not external dependencies.
Packages that were expected to be external dependencies are packages from the
system whose names match a pattern in
.Ar external_package_file .
.Pp
If
.Fl e
is not specified, show the external dependencies of the resolved packages.
External dependencies of the resolved packages are packages not named on the
command line that are targets of dependencies in the resolved packages.
.It Fl m
Repeat the manifest, with any dependencies produced by the
.Ic generate
step removed, before adding the resolved dependencies.
.It Fl o
Write the results to standard output.
This option is intended for human consumption.
Appending this output to a file might result in an invalid manifest.
The
.Fl d
or
.Fl s
options are strongly recommended instead of
.Fl o
for use in a pipeline for manifest processing.
.It Fl d Ar output_dir
Write the resolved dependencies for each manifest provided in a separate file in
.Ar output_dir .
By default, each file has the same base name as the manifest that was the
source of the dependencies written to that file.
.It Fl s Ar suffix
For each output file, append
.Ar suffix
to the base name of the file that was the source of the resolved dependencies.
If
.Ar suffix
does not begin with a dot
.Pq \&.
one will be prepended.
.It Fl S
Only resolve against the manifests given on the command line and not against
the manifests installed on the system.
.It Fl v
Include additional package dependency debugging metadata.
.El
.El
.Sh ENVIRONMENT VARIABLES
The following environment variable is supported:
.Bl -tag -width Ds
.It Ev PKG_IMAGE
Specifies the directory that contains the image to use for package operations.
This value is ignored if
.Fl R
is specified.
.El
.Sh EXIT STATUS
The following exit values are returned:
.Bl -tag -width Ds
.It 0
Everything worked.
.It 1
An error occurred.
.It 2
Invalid command line options were specified.
.It 99
An unanticipated exception occurred.
.El
.Sh EXAMPLES
.Sy Example 1 No Generate Dependencies
.Pp
Generate the dependencies for the manifest written in
.Pa foo ,
whose content directory is in
.Pq ./bar/baz ,
and store the results in
.Pa foo.fdeps .
.Bd -literal -offset 4n
pkgdepend generate -d ./bar/baz foo > foo.fdeps
.Ed
.Pp
.Sy Example 2 No Resolve Dependencies
.Pp
Resolve the file dependencies in
.Pa foo.fdeps
and
.Pa bar.fdeps
against each other and against the packages currently installed on the system.
.Bd -literal -offset 4n
pkgdepend resolve foo.fdeps bar.fdeps
ls *.res
    foo.fdeps.res    bar.fdeps.res
.Ed
.Pp
.Sy Example 3 No Generate and Resolve Dependencies For Two Manifests
.Pp
Generate the file dependencies for two manifests
.Pq
.Pa foo
and
.Pa bar
and retain all the information in the original manifests.
Then resolve the file dependencies and place the resulting manifests in
.Pa ./res .
These resulting manifests can be used with
.Sy pkgsend publish .
.Bd -literal -offset 4n
pkgdepend generate -d /proto/foo -m foo > ./deps/foo
pkgdepend generate -d /proto/bar -m bar > ./deps/bar
pkgdepend resolve -m -d ./res ./deps/foo ./deps/bar
ls ./res
    foo    bar
.Ed
.Pp
.Sy Example 4 No Add Values To Tokens For ELF File Dependencies
.Pp
Replace all
.Sy PLATFORM
tokens in the run paths in ELF files with
.Sy sun4v
and
.Sy sun4u
while generating the dependencies for the manifest written in
.Pa foo
whose content directory is in
.Pa / .
.Bd -literal -offset 4n
Bpkgdepend generate -d / -D 'PLATFORM=sun4v' \e
    -D 'PLATFORM=sun4u' foo
.Ed
.Pp
.Sy Example 5 No Specify a Kernel Module Directory
.Pp
Specify
.Pa /kmod
as the directory in which to find kernel modules when generating the
dependencies for the manifest written in
.Pa foo
whose content directory is in
.Pa / .
.Bd -literal -offset 4n
pkgdepend generate -d / -k /kmod foo
.Ed
.Pp
.Sy Example 6 No Bypass Dependency Generation
.Pp
Append
.Pa opt/python
to the standard Python run path for a given Python script, and bypass
dependency generation against all Python modules called
.Sy test
for a file delivered as
.Pa opt/python/foo/file.py .
.Pp
Avoid generating dependencies against any file delivered in
.Pa usr/lib/python2.6/vendor-packages/xdg .
.Bd -literal -offset 4n
cat manifest.py
  set name=pkg.fmri value=pkg:/mypackage@1.0,1.0
  set name=pkg.summary value="My test package"
  dir path=opt mode=0755 group=sys owner=root
  dir path=opt/python mode=0755 group=sys owner=root
  dir path=opt/python/foo mode=0755 group=sys owner=root
  file path=opt/python/__init__.py mode=0644 group=sys owner=root
  file path=opt/python/foo/__init__.py mode=0644 group=sys owner=root
  #
  # Add runpath and bypass-generate attributes:
  #
  file path=opt/python/foo/file.py mode=0644 group=sys owner=root \e
  pkg.depend.bypass-generate=.*/test.py.* \e
  pkg.depend.bypass-generate=.*/testmodule.so \e
  pkg.depend.bypass-generate=.*/test.so \e
  pkg.depend.bypass-generate=usr/lib/python2.6/vendor-packages/xdg/.* \e
  pkg.depend.runpath=$PKGDEPEND_RUNPATH:/opt/python

pkgdepend generate -d proto manifest.py
.Ed
.Sh INTERFACE STABILITY
The command line interface of
.Nm
is
.Sy Uncommitted .
The output of
.Nm
is
.Sy Not-An-Interface
and may change at any time.
.Sh SEE ALSO
.Xr ldd 1 ,
.Xr pkgsend 1 ,
.Xr pkg 7
.Rs
.%B Linker and Libraries Guide
.Re
